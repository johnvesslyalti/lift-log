generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String     @id
    name          String
    email         String     @unique
    emailVerified Boolean    @default(false)
    image         String?
    height        Float?
    weight        Float?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @default(now()) @updatedAt
    exercises     Exercise[]
    workouts      Workout[]
    accounts      Account[]
    sessions      Session[]
    progress      Progress[]

    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("account")
}

model Verification {
    id         String   @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    @@map("verification")
}

model Workout {
    id               Int               @id @default(autoincrement())
    userId           String
    name             String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @default(now()) @updatedAt
    user             User              @relation(fields: [userId], references: [id])
    workoutExercises WorkoutExercise[]
    progress         Progress[]
}

model WorkoutExercise {
    workoutId  Int
    exerciseId Int
    Exercise   Exercise @relation(fields: [exerciseId], references: [id])
    Workout    Workout  @relation(fields: [workoutId], references: [id])

    @@id([workoutId, exerciseId])
}

model Exercise {
    id               Int               @id @default(autoincrement())
    name             String            @unique
    sets             Int
    reps             Int
    userId           String
    user             User              @relation(fields: [userId], references: [id])
    workoutExercises WorkoutExercise[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @default(now()) @updatedAt
}

model Progress {
    id             Int      @id @default(autoincrement())
    userId         String
    workoutId      Int? // Optional â€” can log progress without a specific workout
    date           DateTime @default(now()) // general progress date
    caloriesBurned Float?
    weight         Float? // weight lifted or body weight
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    // Relations
    user    User     @relation(fields: [userId], references: [id])
    workout Workout? @relation(fields: [workoutId], references: [id])

    @@map("workout_progress")
}
